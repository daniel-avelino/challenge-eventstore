package net.intelie.challenges;

import org.junit.Test;

import static org.junit.Assert.assertEquals;
import static org.junit.Assert.assertThrows;

public class EventTest {

	EventServices services = new EventServices();

	EventIteratorService eventIterator = new EventIteratorService(services.findAll());

	Event event = new Event("some_type", System.currentTimeMillis() + 1);
	Event event2 = new Event("some_type2", System.currentTimeMillis() + 2);
	Event event3 = new Event("some_type", System.currentTimeMillis() + 3);

	@Test
	public void insertShouldInsertNewEventInEventStore() throws Exception {
		insertEvents();
		assertEquals(3, services.findAll().size());
	}

	@Test
	public void removeAllShouldRemoveAllEventsOfType() {
		insertEvents();

		assertEquals(3, services.findAll().size());

		services.removeAll("some_type");
		assertEquals(2, services.findAll().size());
	}

	@Test
	public void queryShouldReturnEventsByTypeAndTimestamp() {
		insertEvents();
		EventIterator iterator = services.query("some_type", System.currentTimeMillis(),
				System.currentTimeMillis() + 3);

		assertEquals(true, iterator.moveNext());

		assertEquals("some_type", iterator.current().type());

		iterator.remove();
		assertThrows(IllegalStateException.class, () -> {
			iterator.current();
		});
		System.out.println(iterator.toString());

		assertEquals(false, iterator.moveNext());

	}

	public void insertEvents() {
		services.insert(event);
		services.insert(event2);
		services.insert(event3);
	}

}